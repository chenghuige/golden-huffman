!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
Buffer	buffer.h	/^  Buffer(FILE* file, int buf_capacity = 64 * 1024) $/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(FILE* file, int buf_capacity = 64 * 1024)
Buffer	buffer.h	/^class Buffer {$/;"	c	language:C++	namespace:glzip
COMPRESSOR_CC_	compressor.cc	1;"	d	language:C++	file:
CanonicalDecoder	compressor.h	/^class CanonicalDecoder : public Decoder<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:Decoder
CanonicalEncoder	compressor.h	/^class CanonicalEncoder : public Encoder<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:Encoder
Compressor	compressor.h	/^  Compressor(const std::string& infile_name, std::string& outfile_name) $/;"	f	language:C++	class:glzip::Compressor	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
Compressor	compressor.h	/^class Compressor {$/;"	c	language:C++	namespace:glzip
Decoder	compressor.h	/^  Decoder(const std::string& infile_name, std::string& outfile_name) {$/;"	f	language:C++	class:glzip::Decoder	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
Decoder	compressor.h	/^class Decoder {$/;"	c	language:C++	namespace:glzip
Decompressor	compressor.h	/^  Decompressor(const std::string& infile_name, std::string& outfile_name) $/;"	f	language:C++	class:glzip::Decompressor	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
Decompressor	compressor.h	/^class Decompressor {$/;"	c	language:C++	namespace:glzip
EncodeHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::EncodeHashMap           EncodeHashMap;$/;"	t	language:C++	class:glzip::CanonicalEncoder	access:public
EncodeHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::EncodeHashMap           EncodeHashMap;$/;"	t	language:C++	class:glzip::Encoder	access:public
EncodeHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::EncodeHashMap           EncodeHashMap;$/;"	t	language:C++	class:glzip::HuffEncoder	access:public
EncodeHashMap	huff_tree.h	/^  typedef typename TypeTraits<_KeyType>::EncodeHashMap              EncodeHashMap;$/;"	t	language:C++	class:glzip::HuffTree	access:public
EncodeHashMap	type_traits.h	/^  typedef std::tr1::unordered_map<char *, char *>   EncodeHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
EncodeHashMap	type_traits.h	/^  typedef std::tr1::unordered_map<std::string, std::string>   EncodeHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
EncodeHashMap	type_traits.h	/^  typedef std::vector<std::string>    EncodeHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
Encoder	compressor.h	/^  Encoder(const std::string& infile_name, std::string& outfile_name) $/;"	f	language:C++	class:glzip::Encoder	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
Encoder	compressor.h	/^class Encoder {$/;"	c	language:C++	namespace:glzip
FrequencyHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::FrequencyHashMap        FrequencyHashMap;$/;"	t	language:C++	class:glzip::CanonicalEncoder	access:public
FrequencyHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::FrequencyHashMap        FrequencyHashMap;$/;"	t	language:C++	class:glzip::Encoder	access:public
FrequencyHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::FrequencyHashMap        FrequencyHashMap;$/;"	t	language:C++	class:glzip::HuffEncoder	access:public
FrequencyHashMap	huff_tree.h	/^  typedef typename TypeTraits<_KeyType>::FrequencyHashMap           FrequencyHashMap;$/;"	t	language:C++	class:glzip::HuffTree	access:public
FrequencyHashMap	type_traits.h	/^  typedef count     FrequencyHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
FrequencyHashMap	type_traits.h	/^  typedef std::tr1::unordered_map<char *, size_t>   FrequencyHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
FrequencyHashMap	type_traits.h	/^  typedef std::tr1::unordered_map<std::string, size_t>        FrequencyHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
HUFF_TREE_CC_	huff_tree.cc	1;"	d	language:C++	file:
HashMap	type_traits.h	/^  typedef std::tr1::unordered_map<_KeyType, size_t> HashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
HuffDQU	huff_tree.h	/^  typedef std::deque<Node*> HuffDQU;   \/\/TODO use vector to see which is better and why$/;"	t	language:C++	class:glzip::HuffTree	access:public
HuffDecoder	compressor.h	/^  HuffDecoder(const std::string& infile_name, std::string& outfile_name)$/;"	f	language:C++	class:glzip::HuffDecoder	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
HuffDecoder	compressor.h	/^class HuffDecoder : public Decoder<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:Decoder
HuffEncoder	compressor.h	/^  HuffEncoder(const std::string& infile_name, std::string& outfile_name) $/;"	f	language:C++	class:glzip::HuffEncoder	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
HuffEncoder	compressor.h	/^class HuffEncoder : public Encoder<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:Encoder
HuffNode	huff_tree.h	/^  HuffNode() {}$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:()
HuffNode	huff_tree.h	/^  HuffNode(HuffNode* lchild, HuffNode* rchild) $/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:(HuffNode* lchild, HuffNode* rchild)
HuffNode	huff_tree.h	/^  HuffNode(_KeyType key, size_t weight = 0) $/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:(_KeyType key, size_t weight = 0)
HuffNode	huff_tree.h	/^struct HuffNode {$/;"	s	language:C++	namespace:glzip
HuffNodePtrGreater	huff_tree.h	/^  struct HuffNodePtrGreater:$/;"	s	language:C++	class:glzip::HuffTree	inherits:std::binary_function	access:public
HuffPRQUE	huff_tree.h	/^  typedef std::priority_queue<Node*, HuffDQU, HuffNodePtrGreater>     HuffPRQUE; \/\/desending order use less<HuffNode> if asending$/;"	t	language:C++	class:glzip::HuffTree	access:public
HuffTree	huff_tree.h	/^  HuffTree(EncodeHashMap& encode_map, FrequencyHashMap& frequency_map)  \/\/long long int (&)[256] can not be inited by const long ...$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:(EncodeHashMap& encode_map, FrequencyHashMap& frequency_map)
HuffTree	huff_tree.h	/^  HuffTree(FILE* infile, FILE* outfile)$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:(FILE* infile, FILE* outfile)
HuffTree	huff_tree.h	/^class HuffTree: public HuffTreeBase<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:HuffTreeBase
HuffTree	huff_tree.h	/^class HuffTree<_KeyType, decode_hufftree>$/;"	c	language:C++	namespace:glzip	inherits:HuffTreeBase
HuffTreeBase	huff_tree.h	/^class HuffTreeBase {$/;"	c	language:C++	namespace:glzip
Node	huff_tree.h	/^  typedef HuffNode<_KeyType>                                        Node;$/;"	t	language:C++	class:glzip::HuffTree	access:public
Node	huff_tree.h	/^  typedef HuffNode<_KeyType>       Node;$/;"	t	language:C++	class:glzip::HuffTreeBase	access:public
Node	huff_tree.h	/^  typedef HuffNode<_KeyType>      Node;$/;"	t	language:C++	struct:glzip::HuffNode	access:public
Node	huff_tree.h	/^  typedef HuffNode<_KeyType>  Node;$/;"	t	language:C++	class:glzip::HuffTree	access:public
Tree	compressor.h	/^  typedef HuffTree<_KeyType, decode_hufftree>   Tree;$/;"	t	language:C++	class:glzip::HuffDecoder	access:public
TypeTraits	type_traits.h	/^class TypeTraits {$/;"	c	language:C++	namespace:glzip
TypeTraits	type_traits.h	/^class TypeTraits<char *> {$/;"	c	language:C++	namespace:glzip
TypeTraits	type_traits.h	/^class TypeTraits<std::string> {$/;"	c	language:C++	namespace:glzip
TypeTraits	type_traits.h	/^class TypeTraits<unsigned char> {$/;"	c	language:C++	namespace:glzip
_BUFFER_H_	buffer.h	2;"	d	language:C++
_COMPRESSOR_H_	compressor.h	8;"	d	language:C++
_HUFF_TREE_H_	huff_tree.h	10;"	d	language:C++
_TYPE_TRAITS_H	type_traits.h	2;"	d	language:C++
bit_cur_	buffer.h	/^  int bit_cur_;  \/\/for bit handling, 0 - 8 write process$/;"	m	language:C++	class:glzip::Buffer	access:private
buf_	buffer.h	/^  unsigned char* buf_;$/;"	m	language:C++	class:glzip::Buffer	access:private
buf_capacity_	buffer.h	/^  int buf_capacity_;$/;"	m	language:C++	class:glzip::Buffer	access:private
buf_used_	buffer.h	/^  int buf_used_;$/;"	m	language:C++	class:glzip::Buffer	access:private
build_tree	huff_tree.cc	/^void HuffTree<_KeyType, _TreeType>::build_tree()$/;"	f	language:C++	class:glzip::HuffTree	signature:()
build_tree	huff_tree.h	/^  void build_tree() {  \/\/From the infile header info we can build the tree$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:()
build_tree	huff_tree.h	/^  void build_tree();$/;"	p	language:C++	class:glzip::HuffTree	access:public	signature:()
caculate_frequency	compressor.h	/^  void caculate_frequency() {$/;"	f	language:C++	class:glzip::Encoder	access:public	signature:()
char_tag	type_traits.h	/^struct char_tag: public normal_tag {};    \/\/for character based encoding$/;"	s	language:C++	namespace:glzip	inherits:normal_tag
compress	compressor.h	/^  void compress() {$/;"	f	language:C++	class:glzip::Compressor	access:public	signature:()
count	type_traits.h	/^  typedef long long count[256];$/;"	t	language:C++	class:glzip::TypeTraits	access:public
cur_	buffer.h	/^  int cur_;$/;"	m	language:C++	class:glzip::Buffer	access:private
decode_byte	huff_tree.cc	/^decode_byte(unsigned char c, Buffer& writer, Node*& cur_node, int bit_num)$/;"	f	language:C++	class:glzip::HuffTree	signature:(unsigned char c, Buffer& writer, Node*& cur_node, int bit_num)
decode_byte	huff_tree.h	/^  void decode_byte(unsigned char c, Buffer& writer, Node*& cur_node, int bit_num = 8);$/;"	p	language:C++	class:glzip::HuffTree	access:private	signature:(unsigned char c, Buffer& writer, Node*& cur_node, int bit_num = 8)
decode_file	compressor.h	/^  virtual void decode_file() {}$/;"	f	language:C++	class:glzip::Decoder	access:public	signature:()
decode_file	compressor.h	/^  void decode_file() {$/;"	f	language:C++	class:glzip::HuffDecoder	access:public	signature:()
decode_file	huff_tree.cc	/^void HuffTree<_KeyType, decode_hufftree>::decode_file()$/;"	f	language:C++	class:glzip::HuffTree	signature:()
decode_file	huff_tree.h	/^  void decode_file();$/;"	p	language:C++	class:glzip::HuffTree	access:public	signature:()
decode_hufftree	type_traits.h	/^struct decode_hufftree {};$/;"	s	language:C++	namespace:glzip
decoder_	compressor.h	/^  _Decoder<_KeyType> decoder_;   $/;"	m	language:C++	class:glzip::Decompressor	access:private
decompress	compressor.h	/^  void decompress() {$/;"	f	language:C++	class:glzip::Decompressor	access:public	signature:()
delete_tree	huff_tree.h	/^  void delete_tree(Node* root) { \/\/TODO rec what if the tree is so big?$/;"	f	language:C++	class:glzip::HuffTreeBase	access:public	signature:(Node* root)
do_build_tree	huff_tree.cc	/^do_build_tree(Node*& root)$/;"	f	language:C++	class:glzip::HuffTree	signature:(Node*& root)
do_build_tree	huff_tree.h	/^  void do_build_tree(Node*& root);$/;"	p	language:C++	class:glzip::HuffTree	access:private	signature:(Node*& root)
do_caculate_frequency	compressor.h	/^  void do_caculate_frequency(char_tag) {$/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(char_tag)
do_caculate_frequency	compressor.h	/^  void do_caculate_frequency(string_tag) {$/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(string_tag)
do_encode_file	compressor.cc	/^void Encoder<_KeyType>::do_encode_file(char_tag)$/;"	f	language:C++	class:glzip::Encoder	signature:(char_tag)
do_encode_file	compressor.h	/^  void do_encode_file(char_tag);$/;"	p	language:C++	class:glzip::Encoder	access:private	signature:(char_tag)
do_encode_file	compressor.h	/^  void do_encode_file(string_tag) {$/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(string_tag)
do_gen_encode	huff_tree.cc	/^do_gen_encode(Node* root, std::string& encode)$/;"	f	language:C++	class:glzip::HuffTree	signature:(Node* root, std::string& encode)
do_gen_encode	huff_tree.h	/^   void do_gen_encode(Node* root, std::string& encode);$/;"	p	language:C++	class:glzip::HuffTree	access:private	signature:(Node* root, std::string& encode)
do_gen_encode	huff_tree.h	/^  void do_gen_encode(Node* root, std::string& encode);$/;"	p	language:C++	class:glzip::HuffTree	access:public	signature:(Node* root, std::string& encode)
do_init	compressor.h	/^  void do_init(char_tag) { $/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(char_tag)
do_print_encode	compressor.cc	/^void Encoder<_KeyType>::do_print_encode(char_tag, std::ostream& out)$/;"	f	language:C++	class:glzip::Encoder	signature:(char_tag, std::ostream& out)
do_print_encode	compressor.h	/^  void do_print_encode(char_tag, std::ostream& out);$/;"	p	language:C++	class:glzip::Encoder	access:private	signature:(char_tag, std::ostream& out)
do_serialize_tree	huff_tree.cc	/^do_serialize_tree(Node* root, Buffer& writer)$/;"	f	language:C++	class:glzip::HuffTree	signature:(Node* root, Buffer& writer)
do_serialize_tree	huff_tree.h	/^  void do_serialize_tree(Node* root, Buffer& writer);$/;"	p	language:C++	class:glzip::HuffTree	access:private	signature:(Node* root, Buffer& writer)
encode_file	compressor.h	/^  void encode_file() {$/;"	f	language:C++	class:glzip::Encoder	access:public	signature:()
encode_hufftree	type_traits.h	/^struct encode_hufftree {};$/;"	s	language:C++	namespace:glzip
encode_map_	compressor.h	/^  EncodeHashMap         encode_map_;$/;"	m	language:C++	class:glzip::Encoder	access:protected
encode_map_	huff_tree.h	/^  EncodeHashMap&         encode_map_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
encoder_	compressor.h	/^  _Encoder<_KeyType> encoder_;  \/\/using enocder_ right now can be HuffEncoder or CanonicalEncoder $/;"	m	language:C++	class:glzip::Compressor	access:private
file_	buffer.h	/^  FILE* file_;$/;"	m	language:C++	class:glzip::Buffer	access:private
fill_buf	buffer.h	/^  int fill_buf() {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:()
flush_buf	buffer.h	/^  void flush_buf() {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:()
frequency_map_	compressor.h	/^  FrequencyHashMap      frequency_map_;$/;"	m	language:C++	class:glzip::Encoder	access:protected
frequency_map_	huff_tree.h	/^  FrequencyHashMap&      frequency_map_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
gen_encode	compressor.h	/^  virtual void gen_encode() = 0;  \/\/must be implemented by specific encoder$/;"	p	language:C++	class:glzip::Encoder	access:public	signature:()
gen_encode	compressor.h	/^  void gen_encode() {$/;"	f	language:C++	class:glzip::CanonicalEncoder	access:public	signature:()
gen_encode	compressor.h	/^  void gen_encode() {$/;"	f	language:C++	class:glzip::HuffEncoder	access:public	signature:()
gen_encode	huff_tree.h	/^  void gen_encode() {$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:()
get_encode_info	compressor.h	/^  virtual void get_encode_info() {}$/;"	f	language:C++	class:glzip::Decoder	access:public	signature:()
get_encode_info	compressor.h	/^  void get_encode_info() {$/;"	f	language:C++	class:glzip::HuffDecoder	access:public	signature:()
glzip	buffer.h	/^namespace glzip {$/;"	n	language:C++
glzip	compressor.cc	/^namespace glzip{$/;"	n	language:C++	file:
glzip	compressor.h	/^namespace glzip{$/;"	n	language:C++
glzip	huff_tree.cc	/^namespace glzip{$/;"	n	language:C++	file:
glzip	huff_tree.h	/^namespace glzip{$/;"	n	language:C++
glzip	type_traits.h	/^namespace glzip{$/;"	n	language:C++
glzip::Buffer	buffer.h	/^class Buffer {$/;"	c	language:C++	namespace:glzip
glzip::Buffer::Buffer	buffer.h	/^  Buffer(FILE* file, int buf_capacity = 64 * 1024) $/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(FILE* file, int buf_capacity = 64 * 1024)
glzip::Buffer::bit_cur_	buffer.h	/^  int bit_cur_;  \/\/for bit handling, 0 - 8 write process$/;"	m	language:C++	class:glzip::Buffer	access:private
glzip::Buffer::buf_	buffer.h	/^  unsigned char* buf_;$/;"	m	language:C++	class:glzip::Buffer	access:private
glzip::Buffer::buf_capacity_	buffer.h	/^  int buf_capacity_;$/;"	m	language:C++	class:glzip::Buffer	access:private
glzip::Buffer::buf_used_	buffer.h	/^  int buf_used_;$/;"	m	language:C++	class:glzip::Buffer	access:private
glzip::Buffer::cur_	buffer.h	/^  int cur_;$/;"	m	language:C++	class:glzip::Buffer	access:private
glzip::Buffer::file_	buffer.h	/^  FILE* file_;$/;"	m	language:C++	class:glzip::Buffer	access:private
glzip::Buffer::fill_buf	buffer.h	/^  int fill_buf() {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:()
glzip::Buffer::flush_buf	buffer.h	/^  void flush_buf() {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:()
glzip::Buffer::left_bits	buffer.h	/^  int left_bits() {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:()
glzip::Buffer::num_	buffer.h	/^  int num_;      \/\/for bit handling  write process$/;"	m	language:C++	class:glzip::Buffer	access:private
glzip::Buffer::read_byte	buffer.h	/^  int read_byte(unsigned char& c) {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(unsigned char& c)
glzip::Buffer::write_bit	buffer.h	/^  void write_bit(int x) {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(int x)
glzip::Buffer::write_byte	buffer.h	/^  void write_byte(unsigned char c) {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(unsigned char c)
glzip::Buffer::write_string	buffer.h	/^  void write_string(const std::string& s) {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(const std::string& s)
glzip::Buffer::~Buffer	buffer.h	/^  ~Buffer() {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:()
glzip::CanonicalDecoder	compressor.h	/^class CanonicalDecoder : public Decoder<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:Decoder
glzip::CanonicalEncoder	compressor.h	/^class CanonicalEncoder : public Encoder<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:Encoder
glzip::CanonicalEncoder::EncodeHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::EncodeHashMap           EncodeHashMap;$/;"	t	language:C++	class:glzip::CanonicalEncoder	access:public
glzip::CanonicalEncoder::FrequencyHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::FrequencyHashMap        FrequencyHashMap;$/;"	t	language:C++	class:glzip::CanonicalEncoder	access:public
glzip::CanonicalEncoder::gen_encode	compressor.h	/^  void gen_encode() {$/;"	f	language:C++	class:glzip::CanonicalEncoder	access:public	signature:()
glzip::CanonicalEncoder::type_catergory	compressor.h	/^  typedef typename TypeTraits<_KeyType>::type_catergory          type_catergory;$/;"	t	language:C++	class:glzip::CanonicalEncoder	access:public
glzip::CanonicalEncoder::write_encode_info	compressor.h	/^  void write_encode_info() {$/;"	f	language:C++	class:glzip::CanonicalEncoder	access:public	signature:()
glzip::Compressor	compressor.h	/^class Compressor {$/;"	c	language:C++	namespace:glzip
glzip::Compressor::Compressor	compressor.h	/^  Compressor(const std::string& infile_name, std::string& outfile_name) $/;"	f	language:C++	class:glzip::Compressor	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
glzip::Compressor::compress	compressor.h	/^  void compress() {$/;"	f	language:C++	class:glzip::Compressor	access:public	signature:()
glzip::Compressor::encoder_	compressor.h	/^  _Encoder<_KeyType> encoder_;  \/\/using enocder_ right now can be HuffEncoder or CanonicalEncoder $/;"	m	language:C++	class:glzip::Compressor	access:private
glzip::Decoder	compressor.h	/^class Decoder {$/;"	c	language:C++	namespace:glzip
glzip::Decoder::Decoder	compressor.h	/^  Decoder(const std::string& infile_name, std::string& outfile_name) {$/;"	f	language:C++	class:glzip::Decoder	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
glzip::Decoder::decode_file	compressor.h	/^  virtual void decode_file() {}$/;"	f	language:C++	class:glzip::Decoder	access:public	signature:()
glzip::Decoder::get_encode_info	compressor.h	/^  virtual void get_encode_info() {}$/;"	f	language:C++	class:glzip::Decoder	access:public	signature:()
glzip::Decoder::infile_	compressor.h	/^  FILE*   infile_;$/;"	m	language:C++	class:glzip::Decoder	access:protected
glzip::Decoder::outfile_	compressor.h	/^  FILE*   outfile_;$/;"	m	language:C++	class:glzip::Decoder	access:protected
glzip::Decoder::~Decoder	compressor.h	/^  ~Decoder() {$/;"	f	language:C++	class:glzip::Decoder	access:public	signature:()
glzip::Decompressor	compressor.h	/^class Decompressor {$/;"	c	language:C++	namespace:glzip
glzip::Decompressor::Decompressor	compressor.h	/^  Decompressor(const std::string& infile_name, std::string& outfile_name) $/;"	f	language:C++	class:glzip::Decompressor	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
glzip::Decompressor::decoder_	compressor.h	/^  _Decoder<_KeyType> decoder_;   $/;"	m	language:C++	class:glzip::Decompressor	access:private
glzip::Decompressor::decompress	compressor.h	/^  void decompress() {$/;"	f	language:C++	class:glzip::Decompressor	access:public	signature:()
glzip::Encoder	compressor.h	/^class Encoder {$/;"	c	language:C++	namespace:glzip
glzip::Encoder::EncodeHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::EncodeHashMap           EncodeHashMap;$/;"	t	language:C++	class:glzip::Encoder	access:public
glzip::Encoder::Encoder	compressor.h	/^  Encoder(const std::string& infile_name, std::string& outfile_name) $/;"	f	language:C++	class:glzip::Encoder	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
glzip::Encoder::FrequencyHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::FrequencyHashMap        FrequencyHashMap;$/;"	t	language:C++	class:glzip::Encoder	access:public
glzip::Encoder::caculate_frequency	compressor.h	/^  void caculate_frequency() {$/;"	f	language:C++	class:glzip::Encoder	access:public	signature:()
glzip::Encoder::do_caculate_frequency	compressor.h	/^  void do_caculate_frequency(char_tag) {$/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(char_tag)
glzip::Encoder::do_caculate_frequency	compressor.h	/^  void do_caculate_frequency(string_tag) {$/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(string_tag)
glzip::Encoder::do_encode_file	compressor.cc	/^void Encoder<_KeyType>::do_encode_file(char_tag)$/;"	f	language:C++	class:glzip::Encoder	signature:(char_tag)
glzip::Encoder::do_encode_file	compressor.h	/^  void do_encode_file(char_tag);$/;"	p	language:C++	class:glzip::Encoder	access:private	signature:(char_tag)
glzip::Encoder::do_encode_file	compressor.h	/^  void do_encode_file(string_tag) {$/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(string_tag)
glzip::Encoder::do_init	compressor.h	/^  void do_init(char_tag) { $/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(char_tag)
glzip::Encoder::do_print_encode	compressor.cc	/^void Encoder<_KeyType>::do_print_encode(char_tag, std::ostream& out)$/;"	f	language:C++	class:glzip::Encoder	signature:(char_tag, std::ostream& out)
glzip::Encoder::do_print_encode	compressor.h	/^  void do_print_encode(char_tag, std::ostream& out);$/;"	p	language:C++	class:glzip::Encoder	access:private	signature:(char_tag, std::ostream& out)
glzip::Encoder::encode_file	compressor.h	/^  void encode_file() {$/;"	f	language:C++	class:glzip::Encoder	access:public	signature:()
glzip::Encoder::encode_map_	compressor.h	/^  EncodeHashMap         encode_map_;$/;"	m	language:C++	class:glzip::Encoder	access:protected
glzip::Encoder::frequency_map_	compressor.h	/^  FrequencyHashMap      frequency_map_;$/;"	m	language:C++	class:glzip::Encoder	access:protected
glzip::Encoder::gen_encode	compressor.h	/^  virtual void gen_encode() = 0;  \/\/must be implemented by specific encoder$/;"	p	language:C++	class:glzip::Encoder	access:public	signature:()
glzip::Encoder::infile_	compressor.h	/^  FILE*                 infile_;$/;"	m	language:C++	class:glzip::Encoder	access:protected
glzip::Encoder::infile_name_	compressor.h	/^  const std::string& infile_name_;        \/\/for debug gen_enocde print log $/;"	m	language:C++	class:glzip::Encoder	access:protected
glzip::Encoder::init_help	compressor.h	/^  void init_help(string_tag){}$/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(string_tag)
glzip::Encoder::outfile_	compressor.h	/^  FILE*                 outfile_;$/;"	m	language:C++	class:glzip::Encoder	access:protected
glzip::Encoder::print_encode	compressor.h	/^  void print_encode(std::ostream& out = std::cout) {$/;"	f	language:C++	class:glzip::Encoder	access:public	signature:(std::ostream& out = std::cout)
glzip::Encoder::type_catergory	compressor.h	/^  typedef typename TypeTraits<_KeyType>::type_catergory type_catergory;$/;"	t	language:C++	class:glzip::Encoder	access:public
glzip::Encoder::write_encode_info	compressor.cc	/^void Encoder<_KeyType>::write_encode_info()$/;"	f	language:C++	class:glzip::Encoder	signature:()
glzip::Encoder::write_encode_info	compressor.h	/^  virtual void write_encode_info() = 0;$/;"	p	language:C++	class:glzip::Encoder	access:public	signature:()
glzip::Encoder::~Encoder	compressor.h	/^  virtual ~Encoder() {$/;"	f	language:C++	class:glzip::Encoder	access:public	signature:()
glzip::HuffDecoder	compressor.h	/^class HuffDecoder : public Decoder<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:Decoder
glzip::HuffDecoder::HuffDecoder	compressor.h	/^  HuffDecoder(const std::string& infile_name, std::string& outfile_name)$/;"	f	language:C++	class:glzip::HuffDecoder	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
glzip::HuffDecoder::Tree	compressor.h	/^  typedef HuffTree<_KeyType, decode_hufftree>   Tree;$/;"	t	language:C++	class:glzip::HuffDecoder	access:public
glzip::HuffDecoder::decode_file	compressor.h	/^  void decode_file() {$/;"	f	language:C++	class:glzip::HuffDecoder	access:public	signature:()
glzip::HuffDecoder::get_encode_info	compressor.h	/^  void get_encode_info() {$/;"	f	language:C++	class:glzip::HuffDecoder	access:public	signature:()
glzip::HuffDecoder::phuff_tree_	compressor.h	/^  Tree*   phuff_tree_;  \/\/using pointer because we want to later instance of HuffTree$/;"	m	language:C++	class:glzip::HuffDecoder	access:private
glzip::HuffDecoder::~HuffDecoder	compressor.h	/^  ~HuffDecoder() {$/;"	f	language:C++	class:glzip::HuffDecoder	access:public	signature:()
glzip::HuffEncoder	compressor.h	/^class HuffEncoder : public Encoder<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:Encoder
glzip::HuffEncoder::EncodeHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::EncodeHashMap           EncodeHashMap;$/;"	t	language:C++	class:glzip::HuffEncoder	access:public
glzip::HuffEncoder::FrequencyHashMap	compressor.h	/^  typedef typename TypeTraits<_KeyType>::FrequencyHashMap        FrequencyHashMap;$/;"	t	language:C++	class:glzip::HuffEncoder	access:public
glzip::HuffEncoder::HuffEncoder	compressor.h	/^  HuffEncoder(const std::string& infile_name, std::string& outfile_name) $/;"	f	language:C++	class:glzip::HuffEncoder	access:public	signature:(const std::string& infile_name, std::string& outfile_name)
glzip::HuffEncoder::gen_encode	compressor.h	/^  void gen_encode() {$/;"	f	language:C++	class:glzip::HuffEncoder	access:public	signature:()
glzip::HuffEncoder::phuff_tree_	compressor.h	/^  HuffTree<_KeyType>* phuff_tree_;  \/\/HuffEnocder use a HuffTree to help gen encode$/;"	m	language:C++	class:glzip::HuffEncoder	access:private
glzip::HuffEncoder::type_catergory	compressor.h	/^  typedef typename TypeTraits<_KeyType>::type_catergory          type_catergory;$/;"	t	language:C++	class:glzip::HuffEncoder	access:public
glzip::HuffEncoder::write_encode_info	compressor.h	/^  virtual void write_encode_info() {$/;"	f	language:C++	class:glzip::HuffEncoder	access:public	signature:()
glzip::HuffEncoder::~HuffEncoder	compressor.h	/^  ~HuffEncoder() {$/;"	f	language:C++	class:glzip::HuffEncoder	access:public	signature:()
glzip::HuffNode	huff_tree.h	/^struct HuffNode {$/;"	s	language:C++	namespace:glzip
glzip::HuffNode::HuffNode	huff_tree.h	/^  HuffNode() {}$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:()
glzip::HuffNode::HuffNode	huff_tree.h	/^  HuffNode(HuffNode* lchild, HuffNode* rchild) $/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:(HuffNode* lchild, HuffNode* rchild)
glzip::HuffNode::HuffNode	huff_tree.h	/^  HuffNode(_KeyType key, size_t weight = 0) $/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:(_KeyType key, size_t weight = 0)
glzip::HuffNode::Node	huff_tree.h	/^  typedef HuffNode<_KeyType>      Node;$/;"	t	language:C++	struct:glzip::HuffNode	access:public
glzip::HuffNode::is_leaf	huff_tree.h	/^  bool is_leaf() {$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:()
glzip::HuffNode::key	huff_tree.h	/^  _KeyType key() const{$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:() const
glzip::HuffNode::key_	huff_tree.h	/^  _KeyType  key_;$/;"	m	language:C++	struct:glzip::HuffNode	access:public
glzip::HuffNode::left	huff_tree.h	/^  Node* left() const {$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:() const
glzip::HuffNode::left_	huff_tree.h	/^  Node*     left_;$/;"	m	language:C++	struct:glzip::HuffNode	access:public
glzip::HuffNode::right	huff_tree.h	/^  Node* right() const {$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:() const
glzip::HuffNode::right_	huff_tree.h	/^  Node*     right_;$/;"	m	language:C++	struct:glzip::HuffNode	access:public
glzip::HuffNode::weight	huff_tree.h	/^  size_t weight() const {$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:() const
glzip::HuffNode::weight_	huff_tree.h	/^  size_t    weight_;   \/\/here weight is frequency of char or string $/;"	m	language:C++	struct:glzip::HuffNode	access:public
glzip::HuffTree	huff_tree.h	/^class HuffTree: public HuffTreeBase<_KeyType> {$/;"	c	language:C++	namespace:glzip	inherits:HuffTreeBase
glzip::HuffTree	huff_tree.h	/^class HuffTree<_KeyType, decode_hufftree>$/;"	c	language:C++	namespace:glzip	inherits:HuffTreeBase
glzip::HuffTree::EncodeHashMap	huff_tree.h	/^  typedef typename TypeTraits<_KeyType>::EncodeHashMap              EncodeHashMap;$/;"	t	language:C++	class:glzip::HuffTree	access:public
glzip::HuffTree::FrequencyHashMap	huff_tree.h	/^  typedef typename TypeTraits<_KeyType>::FrequencyHashMap           FrequencyHashMap;$/;"	t	language:C++	class:glzip::HuffTree	access:public
glzip::HuffTree::HuffDQU	huff_tree.h	/^  typedef std::deque<Node*> HuffDQU;   \/\/TODO use vector to see which is better and why$/;"	t	language:C++	class:glzip::HuffTree	access:public
glzip::HuffTree::HuffNodePtrGreater	huff_tree.h	/^  struct HuffNodePtrGreater:$/;"	s	language:C++	class:glzip::HuffTree	inherits:std::binary_function	access:public
glzip::HuffTree::HuffNodePtrGreater::operator ()	huff_tree.h	/^    bool operator() (const Node *p1, const Node *p2) {$/;"	f	language:C++	struct:glzip::HuffTree::HuffNodePtrGreater	access:public	signature:(const Node *p1, const Node *p2)
glzip::HuffTree::HuffPRQUE	huff_tree.h	/^  typedef std::priority_queue<Node*, HuffDQU, HuffNodePtrGreater>     HuffPRQUE; \/\/desending order use less<HuffNode> if asending$/;"	t	language:C++	class:glzip::HuffTree	access:public
glzip::HuffTree::HuffTree	huff_tree.h	/^  HuffTree(EncodeHashMap& encode_map, FrequencyHashMap& frequency_map)  \/\/long long int (&)[256] can not be inited by const long ...$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:(EncodeHashMap& encode_map, FrequencyHashMap& frequency_map)
glzip::HuffTree::HuffTree	huff_tree.h	/^  HuffTree(FILE* infile, FILE* outfile)$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:(FILE* infile, FILE* outfile)
glzip::HuffTree::Node	huff_tree.h	/^  typedef HuffNode<_KeyType>                                        Node;$/;"	t	language:C++	class:glzip::HuffTree	access:public
glzip::HuffTree::Node	huff_tree.h	/^  typedef HuffNode<_KeyType>  Node;$/;"	t	language:C++	class:glzip::HuffTree	access:public
glzip::HuffTree::build_tree	huff_tree.cc	/^void HuffTree<_KeyType, _TreeType>::build_tree()$/;"	f	language:C++	class:glzip::HuffTree	signature:()
glzip::HuffTree::build_tree	huff_tree.h	/^  void build_tree() {  \/\/From the infile header info we can build the tree$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:()
glzip::HuffTree::build_tree	huff_tree.h	/^  void build_tree();$/;"	p	language:C++	class:glzip::HuffTree	access:public	signature:()
glzip::HuffTree::decode_byte	huff_tree.cc	/^decode_byte(unsigned char c, Buffer& writer, Node*& cur_node, int bit_num)$/;"	f	language:C++	class:glzip::HuffTree	signature:(unsigned char c, Buffer& writer, Node*& cur_node, int bit_num)
glzip::HuffTree::decode_byte	huff_tree.h	/^  void decode_byte(unsigned char c, Buffer& writer, Node*& cur_node, int bit_num = 8);$/;"	p	language:C++	class:glzip::HuffTree	access:private	signature:(unsigned char c, Buffer& writer, Node*& cur_node, int bit_num = 8)
glzip::HuffTree::decode_file	huff_tree.cc	/^void HuffTree<_KeyType, decode_hufftree>::decode_file()$/;"	f	language:C++	class:glzip::HuffTree	signature:()
glzip::HuffTree::decode_file	huff_tree.h	/^  void decode_file();$/;"	p	language:C++	class:glzip::HuffTree	access:public	signature:()
glzip::HuffTree::do_build_tree	huff_tree.cc	/^do_build_tree(Node*& root)$/;"	f	language:C++	class:glzip::HuffTree	signature:(Node*& root)
glzip::HuffTree::do_build_tree	huff_tree.h	/^  void do_build_tree(Node*& root);$/;"	p	language:C++	class:glzip::HuffTree	access:private	signature:(Node*& root)
glzip::HuffTree::do_gen_encode	huff_tree.cc	/^do_gen_encode(Node* root, std::string& encode)$/;"	f	language:C++	class:glzip::HuffTree	signature:(Node* root, std::string& encode)
glzip::HuffTree::do_gen_encode	huff_tree.h	/^   void do_gen_encode(Node* root, std::string& encode);$/;"	p	language:C++	class:glzip::HuffTree	access:private	signature:(Node* root, std::string& encode)
glzip::HuffTree::do_gen_encode	huff_tree.h	/^  void do_gen_encode(Node* root, std::string& encode);$/;"	p	language:C++	class:glzip::HuffTree	access:public	signature:(Node* root, std::string& encode)
glzip::HuffTree::do_serialize_tree	huff_tree.cc	/^do_serialize_tree(Node* root, Buffer& writer)$/;"	f	language:C++	class:glzip::HuffTree	signature:(Node* root, Buffer& writer)
glzip::HuffTree::do_serialize_tree	huff_tree.h	/^  void do_serialize_tree(Node* root, Buffer& writer);$/;"	p	language:C++	class:glzip::HuffTree	access:private	signature:(Node* root, Buffer& writer)
glzip::HuffTree::encode_map_	huff_tree.h	/^  EncodeHashMap&         encode_map_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
glzip::HuffTree::frequency_map_	huff_tree.h	/^  FrequencyHashMap&      frequency_map_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
glzip::HuffTree::gen_encode	huff_tree.h	/^  void gen_encode() {$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:()
glzip::HuffTree::infile_	huff_tree.h	/^  FILE*  infile_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
glzip::HuffTree::init_queue	huff_tree.h	/^  void init_queue(char_tag) {$/;"	f	language:C++	class:glzip::HuffTree	access:private	signature:(char_tag)
glzip::HuffTree::init_queue	huff_tree.h	/^  void init_queue(string_tag) {$/;"	f	language:C++	class:glzip::HuffTree	access:private	signature:(string_tag)
glzip::HuffTree::outfile_	huff_tree.h	/^  FILE*  outfile_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
glzip::HuffTree::pqueue_	huff_tree.h	/^  HuffPRQUE              pqueue_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
glzip::HuffTree::reader_	huff_tree.h	/^  Buffer reader_;   \/\/need reader_ becuause for two function build_tree and decode_file we need the same reader$/;"	m	language:C++	class:glzip::HuffTree	access:private
glzip::HuffTree::serialize_tree	huff_tree.h	/^  void serialize_tree(FILE* outfile) {$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:(FILE* outfile)
glzip::HuffTree::type_catergory	huff_tree.h	/^  typedef typename TypeTraits<_KeyType>::type_catergory             type_catergory;$/;"	t	language:C++	class:glzip::HuffTree	access:public
glzip::HuffTree::~HuffTree	huff_tree.h	/^  ~HuffTree() {$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:()
glzip::HuffTreeBase	huff_tree.h	/^class HuffTreeBase {$/;"	c	language:C++	namespace:glzip
glzip::HuffTreeBase::Node	huff_tree.h	/^  typedef HuffNode<_KeyType>       Node;$/;"	t	language:C++	class:glzip::HuffTreeBase	access:public
glzip::HuffTreeBase::delete_tree	huff_tree.h	/^  void delete_tree(Node* root) { \/\/TODO rec what if the tree is so big?$/;"	f	language:C++	class:glzip::HuffTreeBase	access:public	signature:(Node* root)
glzip::HuffTreeBase::root	huff_tree.h	/^  Node* root() const {$/;"	f	language:C++	class:glzip::HuffTreeBase	access:public	signature:() const
glzip::HuffTreeBase::root_	huff_tree.h	/^  Node*   root_;$/;"	m	language:C++	class:glzip::HuffTreeBase	access:protected
glzip::HuffTreeBase::set_root	huff_tree.h	/^  void set_root(Node* other) {$/;"	f	language:C++	class:glzip::HuffTreeBase	access:public	signature:(Node* other)
glzip::HuffTreeBase::travel	huff_tree.h	/^  void travel(Node* root) {$/;"	f	language:C++	class:glzip::HuffTreeBase	access:public	signature:(Node* root)
glzip::TypeTraits	type_traits.h	/^class TypeTraits {$/;"	c	language:C++	namespace:glzip
glzip::TypeTraits	type_traits.h	/^class TypeTraits<char *> {$/;"	c	language:C++	namespace:glzip
glzip::TypeTraits	type_traits.h	/^class TypeTraits<std::string> {$/;"	c	language:C++	namespace:glzip
glzip::TypeTraits	type_traits.h	/^class TypeTraits<unsigned char> {$/;"	c	language:C++	namespace:glzip
glzip::TypeTraits::EncodeHashMap	type_traits.h	/^  typedef std::tr1::unordered_map<char *, char *>   EncodeHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::EncodeHashMap	type_traits.h	/^  typedef std::tr1::unordered_map<std::string, std::string>   EncodeHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::EncodeHashMap	type_traits.h	/^  typedef std::vector<std::string>    EncodeHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::FrequencyHashMap	type_traits.h	/^  typedef count     FrequencyHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::FrequencyHashMap	type_traits.h	/^  typedef std::tr1::unordered_map<char *, size_t>   FrequencyHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::FrequencyHashMap	type_traits.h	/^  typedef std::tr1::unordered_map<std::string, size_t>        FrequencyHashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::HashMap	type_traits.h	/^  typedef std::tr1::unordered_map<_KeyType, size_t> HashMap;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::count	type_traits.h	/^  typedef long long count[256];$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::type_catergory	type_traits.h	/^  typedef char_tag type_catergory;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::type_catergory	type_traits.h	/^  typedef normal_tag  type_catergory;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::TypeTraits::type_catergory	type_traits.h	/^  typedef string_tag type_catergory;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
glzip::char_tag	type_traits.h	/^struct char_tag: public normal_tag {};    \/\/for character based encoding$/;"	s	language:C++	namespace:glzip	inherits:normal_tag
glzip::decode_hufftree	type_traits.h	/^struct decode_hufftree {};$/;"	s	language:C++	namespace:glzip
glzip::encode_hufftree	type_traits.h	/^struct encode_hufftree {};$/;"	s	language:C++	namespace:glzip
glzip::normal_tag	type_traits.h	/^struct normal_tag {};$/;"	s	language:C++	namespace:glzip
glzip::size_t	type_traits.h	/^typedef unsigned long long size_t;$/;"	t	language:C++	namespace:glzip
glzip::string_tag	type_traits.h	/^struct string_tag: public normal_tag {};  \/\/for word based encoding$/;"	s	language:C++	namespace:glzip	inherits:normal_tag
infile_	compressor.h	/^  FILE*                 infile_;$/;"	m	language:C++	class:glzip::Encoder	access:protected
infile_	compressor.h	/^  FILE*   infile_;$/;"	m	language:C++	class:glzip::Decoder	access:protected
infile_	huff_tree.h	/^  FILE*  infile_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
infile_name_	compressor.h	/^  const std::string& infile_name_;        \/\/for debug gen_enocde print log $/;"	m	language:C++	class:glzip::Encoder	access:protected
init_help	compressor.h	/^  void init_help(string_tag){}$/;"	f	language:C++	class:glzip::Encoder	access:private	signature:(string_tag)
init_queue	huff_tree.h	/^  void init_queue(char_tag) {$/;"	f	language:C++	class:glzip::HuffTree	access:private	signature:(char_tag)
init_queue	huff_tree.h	/^  void init_queue(string_tag) {$/;"	f	language:C++	class:glzip::HuffTree	access:private	signature:(string_tag)
is_leaf	huff_tree.h	/^  bool is_leaf() {$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:()
key	huff_tree.h	/^  _KeyType key() const{$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:() const
key_	huff_tree.h	/^  _KeyType  key_;$/;"	m	language:C++	struct:glzip::HuffNode	access:public
left	huff_tree.h	/^  Node* left() const {$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:() const
left_	huff_tree.h	/^  Node*     left_;$/;"	m	language:C++	struct:glzip::HuffNode	access:public
left_bits	buffer.h	/^  int left_bits() {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:()
normal_tag	type_traits.h	/^struct normal_tag {};$/;"	s	language:C++	namespace:glzip
num_	buffer.h	/^  int num_;      \/\/for bit handling  write process$/;"	m	language:C++	class:glzip::Buffer	access:private
operator ()	huff_tree.h	/^    bool operator() (const Node *p1, const Node *p2) {$/;"	f	language:C++	struct:glzip::HuffTree::HuffNodePtrGreater	access:public	signature:(const Node *p1, const Node *p2)
outfile_	compressor.h	/^  FILE*                 outfile_;$/;"	m	language:C++	class:glzip::Encoder	access:protected
outfile_	compressor.h	/^  FILE*   outfile_;$/;"	m	language:C++	class:glzip::Decoder	access:protected
outfile_	huff_tree.h	/^  FILE*  outfile_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
phuff_tree_	compressor.h	/^  HuffTree<_KeyType>* phuff_tree_;  \/\/HuffEnocder use a HuffTree to help gen encode$/;"	m	language:C++	class:glzip::HuffEncoder	access:private
phuff_tree_	compressor.h	/^  Tree*   phuff_tree_;  \/\/using pointer because we want to later instance of HuffTree$/;"	m	language:C++	class:glzip::HuffDecoder	access:private
pqueue_	huff_tree.h	/^  HuffPRQUE              pqueue_;$/;"	m	language:C++	class:glzip::HuffTree	access:private
print_encode	compressor.h	/^  void print_encode(std::ostream& out = std::cout) {$/;"	f	language:C++	class:glzip::Encoder	access:public	signature:(std::ostream& out = std::cout)
read_byte	buffer.h	/^  int read_byte(unsigned char& c) {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(unsigned char& c)
reader_	huff_tree.h	/^  Buffer reader_;   \/\/need reader_ becuause for two function build_tree and decode_file we need the same reader$/;"	m	language:C++	class:glzip::HuffTree	access:private
right	huff_tree.h	/^  Node* right() const {$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:() const
right_	huff_tree.h	/^  Node*     right_;$/;"	m	language:C++	struct:glzip::HuffNode	access:public
root	huff_tree.h	/^  Node* root() const {$/;"	f	language:C++	class:glzip::HuffTreeBase	access:public	signature:() const
root_	huff_tree.h	/^  Node*   root_;$/;"	m	language:C++	class:glzip::HuffTreeBase	access:protected
serialize_tree	huff_tree.h	/^  void serialize_tree(FILE* outfile) {$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:(FILE* outfile)
set_root	huff_tree.h	/^  void set_root(Node* other) {$/;"	f	language:C++	class:glzip::HuffTreeBase	access:public	signature:(Node* other)
size_t	type_traits.h	/^typedef unsigned long long size_t;$/;"	t	language:C++	namespace:glzip
std	type_traits.h	/^namespace std$/;"	n	language:C++
string_tag	type_traits.h	/^struct string_tag: public normal_tag {};  \/\/for word based encoding$/;"	s	language:C++	namespace:glzip	inherits:normal_tag
travel	huff_tree.h	/^  void travel(Node* root) {$/;"	f	language:C++	class:glzip::HuffTreeBase	access:public	signature:(Node* root)
type_catergory	compressor.h	/^  typedef typename TypeTraits<_KeyType>::type_catergory          type_catergory;$/;"	t	language:C++	class:glzip::CanonicalEncoder	access:public
type_catergory	compressor.h	/^  typedef typename TypeTraits<_KeyType>::type_catergory          type_catergory;$/;"	t	language:C++	class:glzip::HuffEncoder	access:public
type_catergory	compressor.h	/^  typedef typename TypeTraits<_KeyType>::type_catergory type_catergory;$/;"	t	language:C++	class:glzip::Encoder	access:public
type_catergory	huff_tree.h	/^  typedef typename TypeTraits<_KeyType>::type_catergory             type_catergory;$/;"	t	language:C++	class:glzip::HuffTree	access:public
type_catergory	type_traits.h	/^  typedef char_tag type_catergory;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
type_catergory	type_traits.h	/^  typedef normal_tag  type_catergory;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
type_catergory	type_traits.h	/^  typedef string_tag type_catergory;$/;"	t	language:C++	class:glzip::TypeTraits	access:public
weight	huff_tree.h	/^  size_t weight() const {$/;"	f	language:C++	struct:glzip::HuffNode	access:public	signature:() const
weight_	huff_tree.h	/^  size_t    weight_;   \/\/here weight is frequency of char or string $/;"	m	language:C++	struct:glzip::HuffNode	access:public
write_bit	buffer.h	/^  void write_bit(int x) {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(int x)
write_byte	buffer.h	/^  void write_byte(unsigned char c) {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(unsigned char c)
write_encode_info	compressor.cc	/^void Encoder<_KeyType>::write_encode_info()$/;"	f	language:C++	class:glzip::Encoder	signature:()
write_encode_info	compressor.h	/^  virtual void write_encode_info() = 0;$/;"	p	language:C++	class:glzip::Encoder	access:public	signature:()
write_encode_info	compressor.h	/^  virtual void write_encode_info() {$/;"	f	language:C++	class:glzip::HuffEncoder	access:public	signature:()
write_encode_info	compressor.h	/^  void write_encode_info() {$/;"	f	language:C++	class:glzip::CanonicalEncoder	access:public	signature:()
write_string	buffer.h	/^  void write_string(const std::string& s) {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:(const std::string& s)
~Buffer	buffer.h	/^  ~Buffer() {$/;"	f	language:C++	class:glzip::Buffer	access:public	signature:()
~Decoder	compressor.h	/^  ~Decoder() {$/;"	f	language:C++	class:glzip::Decoder	access:public	signature:()
~Encoder	compressor.h	/^  virtual ~Encoder() {$/;"	f	language:C++	class:glzip::Encoder	access:public	signature:()
~HuffDecoder	compressor.h	/^  ~HuffDecoder() {$/;"	f	language:C++	class:glzip::HuffDecoder	access:public	signature:()
~HuffEncoder	compressor.h	/^  ~HuffEncoder() {$/;"	f	language:C++	class:glzip::HuffEncoder	access:public	signature:()
~HuffTree	huff_tree.h	/^  ~HuffTree() {$/;"	f	language:C++	class:glzip::HuffTree	access:public	signature:()
